---
// src/pages/dashboard.astro
import { initializeDatabase } from '../db/db.js'; // Importa la función centralizada
import pkg from 'jsonwebtoken';
const { verify } = pkg;
import HeaderDashboard from '../components/Header-dashboard.astro'; // Importa el nuevo Header del Dashboard
import Sidebar from '../components/Sidebar.astro'; // Importa el nuevo Sidebar
import '../styles/global.css';

// Inicializa la base de datos al cargar la página
await initializeDatabase().catch(err => console.error("Error al inicializar DB desde dashboard.astro:", err));

const JWT_SECRET = '0402Dionel.*'; 

let username = 'Usuario';
let userId = null;
let activeCompanyId: number | null = null;
let activeCompanyName: string = 'Sin Empresa';
let transactions: any[] = []; // Para almacenar las transacciones
let totalCompanyBalance: number = 0; // Para almacenar el saldo total de la empresa
let userCompanies: any[] = []; // ¡NUEVO! Para almacenar todas las empresas del usuario

try {
  const token = Astro.cookies.get('auth_token')?.value;

  if (!token) {
    return Astro.redirect('/login');
  }

  const decoded = verify(token, JWT_SECRET);
  if (typeof decoded === 'object' && decoded !== null) {
    username = decoded.username || 'Usuario';
    userId = decoded.userId; // Captura el userId del token
  } else {
    console.error("Token decodificado en Dashboard no es un objeto:", decoded);
    return Astro.redirect('/login');
  }

  const db = await initializeDatabase(); 

  // ¡NUEVO! Obtener TODAS las empresas a las que el usuario tiene acceso
  userCompanies = await db.all(
      `SELECT c.id, c.company_name, ucr.role
       FROM companies c
       JOIN user_company_roles ucr ON c.id = ucr.company_id
       WHERE ucr.user_id = ?`,
      userId
  );

  // Lógica para determinar la empresa activa
  const activeCompanyCookie = Astro.cookies.get('active_company_id')?.value;

  if (activeCompanyCookie) {
      const companyInfo = await db.get(
          `SELECT c.id, c.company_name FROM companies c JOIN user_company_roles ucr ON c.id = ucr.company_id WHERE c.id = ? AND ucr.user_id = ?`,
          activeCompanyCookie,
          userId
      );
      if (companyInfo) {
          activeCompanyId = companyInfo.id;
          activeCompanyName = companyInfo.company_name;

          // Obtener transacciones y saldo total de la empresa desde el API
          const apiResponse = await fetch(`http://localhost:4321/api/transactions/get-by-company`, {
            headers: {
              'Cookie': `auth_token=${token}; active_company_id=${activeCompanyId}` // Pasamos las cookies explícitamente al API
            }
          });
          
          if (apiResponse.ok) {
            const data = await apiResponse.json();
            transactions = data.transactions;
            totalCompanyBalance = data.totalCompanyBalance;
            console.log('Dashboard Astro: Transacciones cargadas:', transactions);
            console.log('Dashboard Astro: Saldo total de la empresa:', totalCompanyBalance);
          } else {
            const errorData = await apiResponse.json();
            console.error('Dashboard Astro: Error al cargar transacciones o saldo:', errorData.message);
            // Puedes manejar el error mostrando un mensaje al usuario
          }

      } else {
          console.warn("Empresa activa en cookie no válida para el usuario. Redirigiendo a /dashboard/companies.");
          Astro.cookies.set('active_company_id', '', { expires: new Date(0), path: '/' }); // Limpiar cookie inválida
          return Astro.redirect('/dashboard/companies');
      }
  } else {
      // Si no hay empresa activa y el usuario tiene empresas, redirigir a la página de empresas
      if (userCompanies.length > 0) {
          console.warn("No hay empresa activa seleccionada. Redirigiendo a /dashboard/companies.");
          return Astro.redirect('/dashboard/companies');
      } else {
          // Si no tiene empresas, redirigir a la página de empresas para que cree una
          console.warn("El usuario no tiene empresas. Redirigiendo a /dashboard/companies para crear una.");
          return Astro.redirect('/dashboard/companies');
      }
  }

} catch (error: unknown) {
  if (error instanceof Error) {
    console.error("Error en dashboard.astro:", error.message);
  } else {
    console.error("Error en dashboard.astro:", error);
  }
  return Astro.redirect('/login');
}

// Formateador de moneda
const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('es-VE', { style: 'currency', currency: 'VES' }).format(amount);
};

// Clase para el color del saldo (verde/rojo)
const getBalanceClass = (balance: number) => {
    return balance >= 0 ? 'text-green-600' : 'text-red-600';
};

// Clase para el color del monto de transacción
const getAmountClass = (type: string) => {
    return type === 'ingreso' ? 'text-green-600' : 'text-red-600';
};

// Formateador de fecha a "dd-mm-AAAA" (¡CORREGIDO!)
const formatDate = (dateString: string) => {
    // Asumiendo que dateString siempre viene en formato "AAAA-MM-DD" de la base de datos
    const [year, month, day] = dateString.split('-');
    return `${day}-${month}-${year}`;
};
---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard | Contabilito</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        /* Estilos para los labels de tipo (Ingreso/Gasto) */
        .type-label {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px; /* Fully rounded */
            font-weight: 600; /* Semi-bold */
            font-size: 0.75rem; /* text-xs */
            line-height: 1;
            text-transform: capitalize;
        }
        .type-label.ingreso {
            background-color: #d1fae5; /* green-100 */
            color: #065f46; /* green-800 */
        }
        .type-label.gasto {
            background-color: #fee2e2; /* red-100 */
            color: #991b1b; /* red-800 */
        }
    </style>
</head>
<body class="font-poppins bg-gray-100 min-h-screen flex flex-col">
    <HeaderDashboard 
        activeCompanyId={activeCompanyId} 
        activeCompanyName={activeCompanyName} 
        userCompanies={userCompanies} {/* ¡IMPORTANTE! Pasar userCompanies */}
    />

    <div class="flex flex-grow pt-[60px]">
        <Sidebar />

        <main class="flex-grow p-8 ml-48">
            <div class="bg-white rounded-2xl shadow-xl p-8 max-w-4xl w-full mx-auto">
                <h1 class="text-3xl font-extrabold text-gray-900 mb-6 text-center">
                    Dashboard Contable
                </h1>
                <p class="text-md text-gray-700 mb-6 text-center">
                    Gestionando finanzas para: <span class="font-semibold text-blue-700">{activeCompanyName}</span>
                </p>

                <!-- Sección de Saldo General de la Empresa -->
                <div class="mb-8 p-6 bg-blue-50 rounded-lg shadow-inner flex justify-between items-center">
                    <h2 class="text-2xl font-semibold text-blue-800">Saldo General de la Empresa</h2>
                    <p class="text-3xl font-bold {getBalanceClass(totalCompanyBalance)}">
                        {formatCurrency(totalCompanyBalance)}
                    </p>
                </div>

                <!-- Sección de Transacciones Recientes -->
                <div class="mt-8">
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4 flex items-center justify-between">
                        Transacciones Recientes
                        <!-- Saldo Disponible Actual a la derecha del label -->
                        <span class="text-lg font-bold {getBalanceClass(totalCompanyBalance)}">
                            Saldo Actual: {formatCurrency(totalCompanyBalance)}
                        </span>
                    </h2>
                    
                    <div class="overflow-x-auto rounded-lg shadow-md">
                        <table class="min-w-full bg-white">
                            <thead class="bg-gray-200 text-gray-700 uppercase text-sm leading-normal">
                                <tr>
                                    <th class="py-3 px-6 text-left">Fecha</th>
                                    <th class="py-3 px-6 text-left">Descripción</th>
                                    <th class="py-3 px-6 text-left">Categoría</th>
                                    <th class="py-3 px-6 text-left">Cuenta</th>
                                    <th class="py-3 px-6 text-left">Tipo</th>
                                    <th class="py-3 px-6 text-left">Monto</th>
                                </tr>
                            </thead>
                            <tbody class="text-gray-600 text-sm font-light">
                                {transactions.length === 0 ? (
                                    <tr>
                                        <td colspan="6" class="py-3 px-6 text-center italic text-gray-500">
                                            No hay transacciones registradas para esta empresa.
                                        </td>
                                    </tr>
                                ) : (
                                    transactions.map(transaction => (
                                        <tr class="border-b border-gray-200 hover:bg-gray-50">
                                            {/* Fecha: Usando el formateador de fecha dd-mm-AAAA */}
                                            <td class="py-3 px-6 text-left whitespace-nowrap">{formatDate(transaction.transaction_date)}</td>
                                            {/* Descripción: Mostrar N/A si está vacío */}
                                            <td class="py-3 px-6 text-left">{transaction.description || 'N/A'}</td>
                                            {/* Categoría: Mostrar N/A si está vacío */}
                                            <td class="py-3 px-6 text-left">{transaction.category || 'N/A'}</td>
                                            <td class="py-3 px-6 text-left">{transaction.accountName}</td>
                                            {/* Tipo: Con estilo redondo */}
                                            <td class="py-3 px-6 text-left">
                                                <span class={`type-label ${transaction.type}`}>
                                                    {transaction.type === 'ingreso' ? 'Ingreso' : 'Gasto'}
                                                </span>
                                            </td>
                                            {/* Monto: Con color condicional (verde/rojo) - Aplicación de clase corregida */}
                                            <td class={`py-3 px-6 text-left font-semibold ${getAmountClass(transaction.type)}`}>
                                                {formatCurrency(transaction.amount)}
                                            </td>
                                        </tr>
                                    ))
                                )}
                            </tbody>
                        </table>
                    </div>
                </div>

                {/* Botón "Añadir Transacción" no flotante, justificado a la derecha */}
                <div class="mt-8 flex justify-end">
                    <a 
                        href="/dashboard/add-transaction" 
                        class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-md shadow-md flex items-center transition duration-300 transform hover:scale-105"
                        title="Añadir Nueva Transacción"
                    >
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>
                        Añadir Nueva Transacción
                    </a>
                </div>
            </div>
        </main>
    </div>
</body>
</html>
