---
// src/pages/dashboard/companies.astro
import { initializeDatabase } from '../../db/db.js';
import pkg from 'jsonwebtoken';
const { verify } = pkg;
import HeaderDashboard from '../../components/Header-dashboard.astro';
import Sidebar from '../../components/Sidebar.astro';
import '../../styles/global.css';

// Inicializa la base de datos
await initializeDatabase().catch(err => console.error("Error al inicializar DB desde companies.astro:", err));

const JWT_SECRET = '0402Dionel.*'; 

let username = 'Usuario';
let userId = null;
let activeCompanyId: number | null = null;
let activeCompanyName: string = 'Sin Empresa';
let userCompanies: any[] = []; // Para almacenar las empresas del usuario

try {
  const token = Astro.cookies.get('auth_token')?.value;

  if (!token) {
    return Astro.redirect('/login');
  }

  const decoded = verify(token, JWT_SECRET);
  if (typeof decoded === 'object' && decoded !== null) {
    username = decoded.username || 'Usuario';
    userId = decoded.userId;
  } else {
    console.error("Token decodificado en companies.astro no es un objeto:", decoded);
    return Astro.redirect('/login');
  }

  const db = await initializeDatabase(); 

  // Obtener TODAS las empresas a las que el usuario tiene acceso
  userCompanies = await db.all(
      `SELECT c.id, c.company_name, ucr.role
       FROM companies c
       JOIN user_company_roles ucr ON c.id = ucr.company_id
       WHERE ucr.user_id = ?`,
      userId
  );

  // Lógica para determinar la empresa activa
  const activeCompanyCookie = Astro.cookies.get('active_company_id')?.value;
  if (activeCompanyCookie) {
      const companyInfo = await db.get(
          `SELECT c.id, c.company_name FROM companies c JOIN user_company_roles ucr ON c.id = ucr.company_id WHERE c.id = ? AND ucr.user_id = ?`,
          activeCompanyCookie,
          userId
      );
      if (companyInfo) {
          activeCompanyId = companyInfo.id;
          activeCompanyName = companyInfo.company_name;
      } else {
          // Si la cookie existe pero el ID de empresa no es válido para este usuario, la limpiamos.
          console.warn("Empresa activa en cookie no válida para el usuario o no encontrada en DB. Limpiando cookie.");
          Astro.cookies.set('active_company_id', '', { expires: new Date(0), path: '/' }); 
          activeCompanyId = null; // Asegurarse de que quede nulo
      }
  }

  // Si no hay empresa activa (o la cookie fue limpiada) y el usuario tiene empresas,
  // establecemos la primera como la activa SOLO EN MEMORIA para esta renderización.
  // ¡IMPORTANTE! NO VOLVEMOS A SETEAR LA COOKIE AQUÍ.
  // La cookie solo debe ser establecida por los endpoints de la API (create/switch).
  if (activeCompanyId === null && userCompanies.length > 0) {
      const firstCompany = userCompanies[0];
      activeCompanyId = firstCompany.id;
      activeCompanyName = firstCompany.company_name;
      console.log(`companies.astro: Estableciendo por defecto la primera empresa del usuario para renderizado: ${activeCompanyId}`);
      // Si quieres que esta primera empresa se guarde en la cookie,
      // la lógica debería estar en el login o en un endpoint de inicialización,
      // no en cada carga de página. Por ahora, asumimos que la API ya lo hizo.
  }


} catch (error: unknown) {
  if (error instanceof Error) {
    console.error("Error en companies.astro:", error.message);
  } else {
    console.error("Error en companies.astro:", error);
  }
  return Astro.redirect('/login');
}

---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Empresas | Contabilito</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
</head>
<body class="font-poppins bg-gray-100 min-h-screen flex flex-col">
    <HeaderDashboard 
        activeCompanyId={activeCompanyId} 
        activeCompanyName={activeCompanyName} 
        userCompanies={userCompanies}
    />

    <div class="flex flex-grow pt-[60px]">
        <Sidebar />

        <main class="flex-grow p-8 ml-48">
            <div class="bg-white rounded-2xl shadow-xl p-8 w-full mx-auto">
                <h1 class="text-3xl font-extrabold text-gray-900 mb-6 text-center">
                    Gestión de Empresas
                </h1>
                <p class="text-md text-gray-700 mb-6 text-center">
                    Aquí puedes gestionar tus empresas y cambiar la empresa activa.
                </p>

                <!-- Sección para la empresa activa -->
                <div class="mb-8 p-6 bg-blue-50 rounded-lg shadow-inner text-center">
                    <h2 class="text-2xl font-semibold text-blue-800 mb-2">Empresa Activa Actual:</h2>
                    <p class="text-3xl font-bold text-gray-900">{activeCompanyName || 'Ninguna seleccionada'}</p>
                    {activeCompanyId && <p class="text-sm text-gray-600">ID: {activeCompanyId}</p>}
                </div>

                <!-- Botón para crear nueva empresa -->
                <div class="text-center mb-8">
                    <button id="createCompanyBtn" class="bg-green-600 text-white px-6 py-3 rounded-md hover:bg-green-700 transition-colors duration-200 text-lg font-semibold shadow-lg">
                        + Crear Nueva Empresa
                    </button>
                </div>

                <!-- Formulario para crear empresa (inicialmente oculto) -->
                <div id="createCompanyFormContainer" class="hidden bg-gray-50 p-6 rounded-lg shadow-md mb-8">
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4 text-center">Crear Nueva Empresa</h2>
                    <form id="createCompanyForm" class="max-w-md mx-auto space-y-4">
                        <div>
                            <label for="companyName" class="block text-sm font-medium text-gray-700 mb-1">Nombre de la Empresa</label>
                            <input type="text" id="companyName" name="companyName" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Ej. Mi Negocio S.A." />
                        </div>
                        <button type="submit" class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors duration-200 font-semibold">
                            Crear Empresa
                        </button>
                        <button type="button" id="cancelCreateCompanyBtn" class="w-full bg-gray-300 text-gray-800 px-4 py-2 rounded-md hover:bg-gray-400 transition-colors duration-200 font-semibold mt-2">
                            Cancelar
                        </button>
                    </form>
                    <p id="createCompanyMessage" class="mt-4 text-center text-sm"></p>
                </div>

                <!-- Listado de Empresas del Usuario -->
                <h2 class="text-2xl font-semibold text-gray-800 mb-4 text-center">Mis Empresas</h2>
                <div class="overflow-x-auto bg-white rounded-lg shadow-md">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Nombre de la Empresa
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Rol
                                </th>
                                <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Acciones
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            {userCompanies.length === 0 ? (
                                <tr>
                                    <td colspan="3" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center italic">
                                        No perteneces a ninguna empresa aún. ¡Crea una!
                                    </td>
                                </tr>
                            ) : (
                                userCompanies.map((company) => (
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                            {company.company_name}
                                            {company.id == activeCompanyId && (
                                                <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                    Activa
                                                </span>
                                            )}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {company.role === 'owner' ? 'Propietario' : company.role === 'admin' ? 'Administrador' : 'Miembro'}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium text-center">
                                            {company.id != activeCompanyId && (
                                                <button 
                                                    data-company-id={company.id} 
                                                    data-company-name={company.company_name}
                                                    class="switch-company-btn text-blue-600 hover:text-blue-900 mr-4"
                                                >
                                                    Seleccionar
                                                </button>
                                            )}
                                            {/* Aquí se pueden añadir botones para "Gestionar Usuarios", "Editar Empresa", etc. */}
                                        </td>
                                    </tr>
                                ))
                            )}
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <script is:inline>
        const createCompanyBtn = document.getElementById('createCompanyBtn');
        const createCompanyFormContainer = document.getElementById('createCompanyFormContainer');
        const cancelCreateCompanyBtn = document.getElementById('cancelCreateCompanyBtn');
        const createCompanyForm = document.getElementById('createCompanyForm');
        const companyNameInput = document.getElementById('companyName');
        const createCompanyMessage = document.getElementById('createCompanyMessage');
        const switchCompanyButtons = document.querySelectorAll('.switch-company-btn');

        // Mostrar/Ocultar formulario de creación de empresa
        createCompanyBtn.addEventListener('click', () => {
            createCompanyFormContainer.classList.remove('hidden');
            createCompanyBtn.classList.add('hidden'); // Ocultar el botón de crear
            companyNameInput.focus();
        });

        cancelCreateCompanyBtn.addEventListener('click', () => {
            createCompanyFormContainer.classList.add('hidden');
            createCompanyBtn.classList.remove('hidden'); // Mostrar el botón de crear
            createCompanyForm.reset(); // Limpiar el formulario
            createCompanyMessage.textContent = ''; // Limpiar mensajes
            createCompanyMessage.className = 'mt-4 text-center text-sm';
        });

        // Manejar el envío del formulario de creación de empresa
        createCompanyForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            createCompanyMessage.textContent = 'Creando empresa...';
            createCompanyMessage.className = 'mt-4 text-center text-sm text-blue-600';

            const companyName = companyNameInput.value;

            try {
                const response = await fetch('/api/companies/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ companyName }),
                });

                const data = await response.json();

                if (response.ok) {
                    createCompanyMessage.textContent = data.message;
                    createCompanyMessage.className = 'mt-4 text-center text-sm text-green-600';
                    createCompanyForm.reset();
                    // Recargar la página para mostrar la nueva empresa y actualizar la lista
                    window.location.reload(); 
                } else {
                    createCompanyMessage.textContent = data.message || 'Error al crear la empresa.';
                    createCompanyMessage.className = 'mt-4 text-center text-sm text-red-600';
                }
            } catch (error) {
                console.error('Error de red al crear empresa:', error);
                createCompanyMessage.textContent = 'Error de red. Inténtalo de nuevo.';
                createCompanyMessage.className = 'mt-4 text-center text-sm text-red-600';
            }
        });

        // Manejar el cambio de empresa activa
        switchCompanyButtons.forEach(button => {
            button.addEventListener('click', async (event) => {
                const companyId = event.target.dataset.companyId;
                const companyName = event.target.dataset.companyName;

                if (!companyId) {
                    alert('No se pudo obtener el ID de la empresa.'); // Considerar usar un modal personalizado en lugar de alert
                    return;
                }

                // Usar un modal o un mensaje para confirmar, no alert()
                const confirmSwitch = confirm(`¿Estás seguro de que quieres cambiar a la empresa "${companyName}"?`); // Reemplazar con modal
                if (!confirmSwitch) {
                    return;
                }

                try {
                    const response = await fetch('/api/companies/switch', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ companyId: parseInt(companyId) }),
                    });

                    const data = await response.json();

                    if (response.ok) {
                        alert(data.message); // Reemplazar con modal
                        window.location.href = '/dashboard'; // Redirigir al dashboard principal
                    } else {
                        alert(data.message || 'Error al cambiar de empresa.'); // Reemplazar con modal
                    }
                } catch (error) {
                    console.error('Error de red al cambiar empresa:', error);
                    alert('Error de red al cambiar de empresa.'); // Reemplazar con modal
                }
            });
        });
    </script>
</body>
</html>
